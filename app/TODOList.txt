############# [ Lista delle cose da fare ] #############

Sospensione del salvataggio automatico ogni X minuti.
Se implementato, bisogna farlo con WorkManager (min 15 min), sennò con
un Service in background.

Per risolvere questo "problema", si salva solo quando:
- si chiude l'app
- si preme il tasto "Termina"



############## Appunti e considerazioni ##############
- Target minimo è un sdk 29, perchè usa il Recording API.

- Il Fitness API non include calorie e km percorsi, ma
solo i passi, nonostante venga dichiarato come ci siano 3 campi (step, km, calorie).

- Bi-lingua.


############## TODO PROSSIMA VOLTA ##############



TODO:
 - [ ] Implementare la funzionalità di salvataggio automatico.
 - [ ] Gestire il salvataggio in caso di chiusura dell'app.
 - [ ] Operazione 1 in background --> Notifica all'utente che deve esercitarsi.


############################# per datastore #############################
https://medium.com/@vgoyal_1/datastore-android-how-to-use-it-like-a-pro-using-kotlin-2c2440683d78



########################## Landing Screen   ##########################

Quando l'utente entra per la prima volta sull'app, arriva al LandingScreen
la quale contiene un modo per inserire un Username o selezionarlo da uno di quelli già presenti.
LandingScreen si collega a --> LandinScreenVM --> UserRepository --> UserDAO
LandingScreenVM --> DataStoreRepository per salvare l'informazione dell'utente.

Usa un UserRepository perchè serve per prendere/aggiornare l'informazione sull'utente.
Mentre


########################### Problem ################
Il problema del database è che non permette di ricevere direttamente CustomObject ma
per forza Flow<> in quanto viene eseguito sul thread principale.
La soluzione è usare Flow<> oppure usare suspend fun (fun asincrona) oppure
permettere di eseguire le query sul thread principale con:
.allowMainThreadQueries() nella creazione del db.

